        -:    0:Source:C:/Users/User/data/my_scripts/C++/timus/2123.cpp
        -:    0:Graph:C:\Users\User\data\my_scripts\C++\cmake-build-debug-coverage\CMakeFiles\C++.dir\timus\2123.cpp.gcno
        -:    0:Data:C:\Users\User\data\my_scripts\C++\cmake-build-debug-coverage\CMakeFiles\C++.dir\timus\2123.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <iostream>
        -:    2:
        -:    3:typedef uint64_t ul;
        -:    4:typedef uint_fast16_t us;
        -:    5:
        -:    6:class solution{
        -:    7:public:
        -:    8:    us n;
        -:    9:    ul W;
        -:   10:    ul* items;
        -:   11:    ul* partial_sums;
function _ZN8solutionC1Ev called 1 returned 100% blocks executed 88%
        1:   12:    solution(){
        1:   13:        std::cin >> n >>  W;
        1:   13-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   13-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
       1*:   14:        items = new ul[n];
        1:   14-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   14-block  1
    %%%%%:   14-block  2
call    2 never executed
        1:   14-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
       1*:   15:        partial_sums = new ul[n];
        1:   15-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   15-block  1
    %%%%%:   15-block  2
call    2 never executed
        1:   15-block  3
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   16:        ul cur_item, cur_sum = 0;
        6:   17:        for(us i = 0; i < n; ++i){
        1:   17-block  0
        6:   17-block  1
branch  0 taken 5
branch  1 taken 1 (fallthrough)
        5:   18:            std::cin >> cur_item;
        5:   18-block  0
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   19:            items[i] = cur_item;
        5:   20:            cur_sum += 2 * cur_item;
        5:   21:            partial_sums[i] = cur_sum;
        5:   21-block  0
        -:   22:        }
        1:   23:    }
        1:   23-block  0
        -:   24:
function _ZN8solution12combinationsEyt called 28 returned 100% blocks executed 100%
       28:   25:    ul combinations(ul req_sum, us cur_item_idx){
        -:   26:
       28:   27:        if(req_sum <= 0 || partial_sums[cur_item_idx] < req_sum) return !req_sum;
       28:   27-block  0
branch  0 taken 27 (fallthrough)
branch  1 taken 1
       27:   27-block  1
branch  2 taken 16 (fallthrough)
branch  3 taken 11
       17:   27-block  2
        -:   28:        //Если сумма <0, то переборщили с предметами, отсекаем ветвь.
        -:   29:        //Если нужно больше чем сумма всех оставшихся, то недобор, можно не пытаться.
        -:   30:        //Если она =0, возвращаем 1, любые дальнейшие добавления испортят сумму.
       11:   31:        if(cur_item_idx) {
       11:   31-block  0
branch  0 taken 9 (fallthrough)
branch  1 taken 2
        9:   32:            return combinations(req_sum, cur_item_idx - 1) +
        9:   32-block  0
call    0 returned 9
        9:   33:                   combinations(req_sum - items[cur_item_idx], cur_item_idx - 1) +
call    0 returned 9
        9:   34:                   combinations(req_sum - (items[cur_item_idx] << 1), cur_item_idx - 1);
call    0 returned 9
        -:   35:        }
        2:   36:        return (req_sum == items[cur_item_idx]) + (req_sum == items[cur_item_idx] << 1);
        2:   36-block  0
        -:   37:
        -:   38:    }
        -:   39:
function _ZN8solution5solveEv called 1 returned 100% blocks executed 100%
        1:   40:    ul solve(){
        1:   41:        return combinations(W, n - 1);
        1:   41-block  0
call    0 returned 1
        -:   42:    }
        -:   43:
        -:   44:};
        -:   45:
        -:   46:
function main called 1 returned 100% blocks executed 100%
        1:   47:int main(){
        1:   48:    solution a;
        1:   48-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   49:    std::cout << a.solve();
        1:   49-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   49-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   50:}
        1:   50-block  0
        1:   50-block  1
